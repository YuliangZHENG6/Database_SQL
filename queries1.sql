/* a) For every year, output the year and the number of publications for said year */

SELECT EXTRACT(YEAR FROM PU.PUBLICATION_DATE), 
COUNT(PU.PUBLICA TION_ID)
FROM PUBLICATIONS PU
WHERE EXTRACT(YEAR FROM PU.PUBLICATION_DATE) <> 1001 
GROUP BY EXTRACT(YEAR FROM PU.PUBLICATION_DATE) 
ORDER BY EXTRACT(YEAR FROM PU.PUBLICATION_DATE) DESC;

/* Changes made from previous submission: */

/* WHERE EXTRACT(YEAR FROM PU.PUBLICATION_DATE) <> '8888' 
and 
EXTRACT(YEAR FROM PU.PUBLICATION_DATE) <> '1001'
because there are random data. This line of code is removed because DATA CLEANING has been performed. The date is changed to 1001­01­01 when its not useful enough.
 */
 
 
 
/* b) Output the names of the ten authors with most publications. */

SELECT AUTHOR_NAME
FROM AUTHOR
WHERE AUTHOR.AUTHOR_ID IN (SELECT AUTHOR_ID FROM (SELECT PA.AUTHOR_ID, COUNT(DISTINCT (PUBLICATION_ID))
DESC)
FROM PUBLICATION_AUTHORS PA
GROUP BY AUTHOR_ID
ORDER BY COUNT(DISTINCT (PUBLICATION_ID))
WHERE ROWNUM <= 10 )



/* c) What are the names of the youngest and oldest authors to publish something in 2010? */

SELECT AUTHOR_NAME, AUTHOR_BIRTHDATE FROM (
SELECT DISTINCT(A.AUTHOR_NAME), A.AUTHOR_BIRTHDATE FROM PUBLICATIONS P, PUBLICATION_AUTHORS PA, AUTHOR A WHERE EXTRACT(YEAR FROM P.PUBLICATION_DATE) = 2010 AND A.AUTHOR_ID = PA.AUTHOR_ID AND P.PUBLICATION_ID = PA.PUBLICATION_ID
AND A.AUTHOR_BIRTHDATE IS NOT NULL
ORDER BY AUTHOR_BIRTHDATE)
WHERE ROWNUM = 1
UNION
SELECT AUTHOR_NAME, AUTHOR_BIRTHDATE FROM (
￼SELECT DISTINCT(A.AUTHOR_NAME), A.AUTHOR_BIRTHDATE FROM PUBLICATIONS P, PUBLICATION_AUTHORS PA, AUTHOR A WHERE EXTRACT(YEAR FROM P.PUBLICATION_DATE) = 2010 AND A.AUTHOR_ID = PA.AUTHOR_ID AND P.PUBLICATION_ID = PA.PUBLICATION_ID
AND A.AUTHOR_BIRTHDATE IS NOT NULL ORDER BY AUTHOR_BIRTHDATE DESC) WHERE ROWNUM = 1;
No changes made. THIS IS OPTIMISED QUERY. SOMETIMES JOIN MAY BE FASTER THAN NESTED QUERIES



/* d) Howmanycomics(graphictitles)havepublicationswithlessthan50pages,lessthan 100 pages, and more (or equal) than 100 pages? */

SELECT SUM(LESS50) AS LESS50, SUM(LESS100) AS LESS100, SUM(MORE100) AS MORE100
FROM (
SELECT 0 AS LESS50, 0 AS LESS100, COUNT(T2.TITLE_ID) AS MORE100 FROM TITLE T2, PUBLICATIONS P, PUBLICATION_CONTENT PC WHERE (PC.TITLE_ID = T2.TITLE_ID AND
T2.TITLE_GRAPHIC = 'Yes' AND PC.PUBLICATION_ID = P.PUBLICATION_ID AND ( P.NEWPAGES) >= 100) group by 0, 0
UNION ALL
SELECT COUNT(T.TITLE_ID) AS LESS50, 0 AS LESS100, 0 AS MORE100 FROM TITLE T, PUBLICATIONS P, PUBLICATION_CONTENT PC WHERE (PC.TITLE_ID = T.TITLE_ID AND
T.TITLE_GRAPHIC = 'Yes' AND PC.PUBLICATION_ID = P.PUBLICATION_ID AND ( P.NEWPAGES) < 50) group by 0, 0
UNION ALL
SELECT 0 AS LESS50, COUNT(T1.TITLE_ID) AS LESS100, 0 AS MORE100 FROM TITLE T1, PUBLICATIONS P, PUBLICATION_CONTENT PC WHERE (PC.TITLE_ID = T1.TITLE_ID AND
T1.TITLE_GRAPHIC = 'Yes' AND PC.PUBLICATION_ID = P.PUBLICATION_ID AND ( P.NEWPAGES) < 100) group by 0, 0 );
Changes made from previous submission:
Data cleaning performed and placed the new pages into a new column. Roman characters are ignored.



/* e) For every publisher, calculate the average price of its published novels (the ones that have a dollar price). */

SELECT PR.PUBLISHER_NAME, ROUND(AVG(P.PRICE),2) FROM PUBLISHER PR, PUBLICATIONS P
WHERE PR.PUBLISHER_ID = P.PUBLISHER_ID AND PR.PUBLISHER_ID IN( SELECT PUBLISHER_ID
￼FROM PUBLICATIONS
WHERE PUBLICATION_TYPE = 'NOVEL' AND CURRENCY = '$' GROUP BY PUBLISHER_ID)
GROUP BY PR.PUBLISHER_NAME;
Changes made from previous submission:
Currency is kept in a new column. Hence, we can filter out the '$'.



/* f) What is the name of the author with the highest number of titles that are tagged as “science fiction”? */

SELECT AUTHOR_NAME FROM (
FIND ALL AUTHOR WHO WRITES SCIENCE FICTION ORDER BY DESC SELECT DISTINCT(A.AUTHOR_NAME)
FROM TITLE_TAGS TT, TAGS, PUBLICATION_AUTHORS PA, AUTHOR A, PUBLICATION_CONTENT PC
WHERE TT.TAG_ID = TAGS.TAG_ID AND PC.TITLE_ID = TT.TITLE_ID AND PC.PUBLICATION_ID = PA.PUBLICATION_ID_CONNECT TABLES TGT AND A.AUTHOR_ID = PA.AUTHOR_ID AND P.PUBLICATION_ID = PA.PUBLICATION_ID CONNECT TABLES TGT
AND TAGS.TAG_NAME LIKE '%science fiction%' GROUP BY A.AUTHOR_NAME
ORDER BY COUNT(A.AUTHOR_NAME) DESC) WHERE ROWNUM = 1 ;

/* Changes made from previous submission:
Unnecessary tables like t and p are not needed. Hence, table linkage are removed. More efficiency. Filter for science fiction is done by LIKE operator to prevent any data loss.
 */


/* g) List the three most popular titles (i.e., the ones with the most awards and reviews). */

/* The following query produces the correct result but however, using T.TITLE_ID = TA.TITLE_ID may lose some data. In this case, we are lucky enough to be able to produce the correct result at a much faster speed.
 */
SELECT TITLE
FROM (SELECT T.TITLE, (COUNT(TA.AWARD_ID)+ COUNT(R.REVIEW_ID))AS POPULARITY
FROM TITLE T, TITLE_AWARDS TA, REVIEWS R_ID=ID MAY LOSE SOME DATA
WHERE T.TITLE_ID = TA.TITLE_ID AND T.TITLE_ID = R.TITLE_ID GROUP BY T.TITLE
ORDER BY POPULARITY DESC)
WHERE ROWNUM <= 3; 
WRTING ‘=’ DOESNT WORK

